// Generated by SolidPython 1.1.3 on 2025-05-14 11:21:29


union() {
	difference() {
		linear_extrude(height = 43.5000000000) {
			polygon(points = [[0, 0], [23, 0], [2, 151], [0, 151]]);
		}
		union() {
			translate(v = [10.3526490066, 16.5000000000, 21.7500000000]) {
				rotate(a = [0, 90, 0]) {
					cylinder(center = true, h = 45.5000000000, r = 1.8750000000);
				}
			}
			translate(v = [2.4950331126, 129.5000000000, 21.7500000000]) {
				rotate(a = [0, 90, 0]) {
					cylinder(center = true, h = 45.5000000000, r = 1.8750000000);
				}
			}
		}
		difference() {
			translate(v = [0, 0, 0]) {
				cube(center = false, size = [23, 18, 43.5000000000]);
			}
			scale(v = [1, 1, 1.2083333333]) {
				translate(v = [0, 18, 18]) {
					rotate(a = [0, 90, 0]) {
						cylinder(center = false, h = 23, r = 18);
					}
				}
			}
		}
		translate(v = [0, 115, 0]) {
			difference() {
				translate(v = [0, 18, 0]) {
					cube(center = false, size = [23, 18, 43.5000000000]);
				}
				scale(v = [1, 1, 1.2083333333]) {
					translate(v = [0, 18, 18]) {
						rotate(a = [0, 90, 0]) {
							cylinder(center = false, h = 23, r = 18);
						}
					}
				}
			}
		}
	}
	translate(v = [12.6013245033, 74.5000000000, 0]) {
		rotate(a = [0, 0, -82.0824969652]) {
			linear_extrude(height = 43.5000000000) {
				polygon(points = [[53.5000000000, 0.0000000000], [53.4736009796, 0.1570537954], [53.3944299709, 0.3139525976], [53.2625651063, 0.4705415666], [53.0781365203, 0.6266661678], [52.8413262218, 0.7821723252], [52.5523679140, 0.9369065729], [52.2115467637, 1.0907162070], [51.8191991204, 1.2434494358], [51.3757121837, 1.3949555302], [50.8815236218, 1.5450849719], [50.3371211391, 1.6936896012], [49.7430419950, 1.8406227634], [49.0998724741, 1.9857394532], [48.4082473069, 2.1288964578], [47.6688490441, 2.2699524987], [46.8824073823, 2.4087683705], [46.0496984447, 2.5452070788], [45.1715440144, 2.6791339749], [44.2488107237, 2.8104168893], [43.2824091991, 2.9389262615], [42.2732931621, 3.0645352683], [41.2224584885, 3.1871199487], [40.1309422252, 3.3065593266], [38.9998215670, 3.4227355296], [37.8302127935, 3.5355339059], [36.6232701672, 3.6448431371], [35.3801847948, 3.7505553482], [34.1021834516, 3.8525662139], [32.7905273704, 3.9507750619], [31.4465109976, 4.0450849719], [30.0714607151, 4.1354028714], [28.6667335314, 4.2216396275], [27.2337157426, 4.3037101350], [25.7738215644, 4.3815334002], [24.2884917361, 4.4550326209], [22.7791920987, 4.5241352623], [21.2474121490, 4.5887731284], [19.6946635686, 4.6488824294], [18.1224787331, 4.7044038448], [16.5324091991, 4.7552825815], [14.9260241731, 4.8014684284], [13.3049089633, 4.8429158056], [11.6706634147, 4.8795838097], [10.0249003303, 4.9114362536], [8.3692438797, 4.9384417030], [6.7053279957, 4.9605735066], [5.0347947625, 4.9778098230], [3.3592927948, 4.9901336421], [1.6804756107, 4.9975328018], [0.0000000000, 5.0000000000], [-1.6804756107, 4.9975328018], [-3.3592927948, 4.9901336421], [-5.0347947625, 4.9778098230], [-6.7053279957, 4.9605735066], [-8.3692438797, 4.9384417030], [-10.0249003303, 4.9114362536], [-11.6706634147, 4.8795838097], [-13.3049089633, 4.8429158056], [-14.9260241731, 4.8014684284], [-16.5324091991, 4.7552825815], [-18.1224787331, 4.7044038448], [-19.6946635686, 4.6488824294], [-21.2474121490, 4.5887731284], [-22.7791920987, 4.5241352623], [-24.2884917361, 4.4550326209], [-25.7738215644, 4.3815334002], [-27.2337157426, 4.3037101350], [-28.6667335314, 4.2216396275], [-30.0714607151, 4.1354028714], [-31.4465109976, 4.0450849719], [-32.7905273704, 3.9507750619], [-34.1021834516, 3.8525662139], [-35.3801847948, 3.7505553482], [-36.6232701672, 3.6448431371], [-37.8302127935, 3.5355339059], [-38.9998215670, 3.4227355296], [-40.1309422252, 3.3065593266], [-41.2224584885, 3.1871199487], [-42.2732931621, 3.0645352683], [-43.2824091991, 2.9389262615], [-44.2488107237, 2.8104168893], [-45.1715440144, 2.6791339749], [-46.0496984447, 2.5452070788], [-46.8824073823, 2.4087683705], [-47.6688490441, 2.2699524987], [-48.4082473069, 2.1288964578], [-49.0998724741, 1.9857394532], [-49.7430419950, 1.8406227634], [-50.3371211391, 1.6936896012], [-50.8815236218, 1.5450849719], [-51.3757121837, 1.3949555302], [-51.8191991204, 1.2434494358], [-52.2115467637, 1.0907162070], [-52.5523679140, 0.9369065729], [-52.8413262218, 0.7821723252], [-53.0781365203, 0.6266661678], [-53.2625651063, 0.4705415666], [-53.3944299709, 0.3139525976], [-53.4736009796, 0.1570537954], [-53.5000000000, 0.0000000000], [-53.5000000000, 0], [53.5000000000, 0]]);
			}
			linear_extrude(height = 43.5000000000) {
				polygon(points = [[51.5000000000, 0.0000000000], [51.5000000000, 1.3500000000], [55.5000000000, 0.0000000000]]);
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
#! /home/tfili/Source/tfili/3d-printing/venv/bin/python

from solid import *
from solid.utils import *
import subprocess
import math

# Dimensions
height = 151             # vertical height (Y)
width = 43.5             # width of the side face (Z)
top_thickness = 23       # thickness at the top (X)
bottom_thickness = 2     # thickness at the bottom (X)
screw_diameter = 3.75
screw_radius = screw_diameter / 2

# Hole positions (from top and bottom)
hole1_from_top = 16.5
hole2_from_bottom = 21.5
hole1_y = hole1_from_top                     # 24.5mm from top
hole2_y = height - hole2_from_bottom         # 22mm from bottom

rounded_edge_radius = 18
ellipse_height = 5
ellipse_top_offset = 21
ellipse_bottom_offset = 23

# Calculate slope angle in degrees
slope_angle = math.degrees(math.atan2(top_thickness - bottom_thickness, height))

# Calculate thickness at a specific Y position along the slope
def thickness_at(y):
    return top_thickness - (top_thickness - bottom_thickness) * (y / height)

# Create wedge shape
def create_wedge():
    profile = polygon(points=[
        [0, 0],
        [top_thickness, 0],
        [bottom_thickness, height],
        [0, height]
    ])
    return linear_extrude(width)(profile)

# Create a hole through the side at a specific Y position
def create_side_hole(y_pos):
    local_thickness = thickness_at(y_pos)
    return translate([local_thickness / 2, y_pos, width / 2])(
        rotate([0, 90, 0])(
            cylinder(h=width + 2, r=screw_radius, center=True)
        )
    )

# Generate a rectangle and cut a cylinder out of it and subtract that from the model
def create_rounded_mask(top=True):
    scaleFactor = width / (2 * rounded_edge_radius);
    rect = translate([0, (0 if top else rounded_edge_radius), 0]) (
             cube([top_thickness, rounded_edge_radius, width], center = False)
           )
    cyl = scale([1, 1, width/(rounded_edge_radius*2)]) (
            translate([0, rounded_edge_radius, rounded_edge_radius]) (
              rotate([0,90,0]) (
                cylinder(r = rounded_edge_radius, h = top_thickness, center = False)
              )
            )
          )

    return rect - cyl

# Move it to the bottom
def create_bottom_rounded_mask():
    return translate([0, height-rounded_edge_radius*2, 0]) (
      create_rounded_mask(False)
    )

def semi_ellipse(segments=100):
    rx = (height - ellipse_top_offset - ellipse_bottom_offset)/2
    ry = ellipse_height
    points = []
    for i in range(segments + 1):
        angle = math.pi * (i / segments)  # 0 to pi
        x = rx * math.cos(angle)
        y = ry * math.sin(angle)
        points.append([x, y])
    
    # Close the shape by adding the base edge
    points.append([-rx, 0])
    points.append([rx, 0])
    
    shape_2d = polygon(points)

    triangle_offset = (height - ellipse_top_offset - ellipse_bottom_offset) / 2
    triangle_wedge = polygon(points = [[triangle_offset-2, 0.0000000000],[triangle_offset-2, 1.3500000000],[triangle_offset+2, 0.0000000000]]);
    x_translate = ((height-ellipse_top_offset)/height) * top_thickness - bottom_thickness - ellipse_height - 0.2
    return translate([x_translate, rx+ellipse_top_offset, 0]) (
        rotate([0, 0, -90+slope_angle]) (
            linear_extrude(width)(shape_2d),
            linear_extrude(width)(triangle_wedge)
        )
    )

# Build model
wedge = create_wedge()
hole1 = create_side_hole(hole1_y)
hole2 = create_side_hole(hole2_y)
top_mask = create_rounded_mask();
bottom_mask = create_bottom_rounded_mask()
ellipse = semi_ellipse()

# Combine everything
model = wedge - (hole1 + hole2) - top_mask - bottom_mask

# Export to SCAD
scad_render_to_file(model + ellipse, 'wedge.scad')

# Convert to STL
subprocess.run(["openscad", "-o", "wedge.stl", "wedge.scad"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True) 
 
************************************************/
