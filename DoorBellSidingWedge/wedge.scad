// Generated by SolidPython 1.1.3 on 2025-04-30 21:04:54


difference() {
	union() {
		linear_extrude(height = 43.5000000000) {
			polygon(points = [[0, 0], [17.5000000000, 0], [2, 159], [0, 159]]);
		}
		translate(v = [0, 0, 0]) {
			translate(v = [0, 0, 0]) {
				translate(v = [0, 0, 0]) {
					linear_extrude(height = 43.5000000000) {
						polygon(points = [[17.5000000000, 0], [22.5000000000, 0], [2, 132], [2, 132]]);
					}
				}
			}
		}
	}
	union() {
		translate(v = [7.5558176101, 24.5000000000, 21.7500000000]) {
			rotate(a = [0, 90, 0]) {
				cylinder(center = true, h = 45.5000000000, r = 1.8750000000);
			}
		}
		translate(v = [2.0235849057, 138, 21.7500000000]) {
			rotate(a = [0, 90, 0]) {
				cylinder(center = true, h = 45.5000000000, r = 1.8750000000);
			}
		}
		translate(v = [17.1476200686, 24.5000000000, 21.7500000000]) {
			rotate(a = [0, 90, 0]) {
				cylinder(center = true, h = 45.5000000000, r = 1.8750000000);
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
#! /home/tfili/Source/tfili/3d-printing/venv/bin/python

from solid import *
from solid.utils import *
import subprocess
import math

# Dimensions
height = 159             # vertical height (Y)
width = 43.5             # width of the side face (Z)
top_thickness = 17.5     # thickness at the top (X)
bottom_thickness = 2     # thickness at the bottom (X)
screw_diameter = 3.75
screw_radius = screw_diameter / 2

# Hole positions (from top and bottom)
hole1_from_top = 24.5
hole2_from_bottom = 21
hole1_y = hole1_from_top                     # 24.5mm from top
hole2_y = height - hole2_from_bottom         # 19mm from bottom

# Calculate slope angle in degrees
slope_angle = math.degrees(math.atan2(top_thickness - bottom_thickness, height))

# Second wedge parameters
second_wedge_length = 132  # vertical height along original Y
second_top_thickness = 5
second_bottom_thickness = 0

# Calculate thickness at a specific Y position along the slope
def thickness_at(y):
    return top_thickness - (top_thickness - bottom_thickness) * (y / height)

# Create wedge shape
def create_wedge():
    profile = polygon(points=[
        [0, 0],
        [top_thickness, 0],
        [bottom_thickness, height],
        [0, height]
    ])
    return linear_extrude(width)(profile)

# Create a hole through the side at a specific Y position
def create_side_hole(y_pos):
    local_thickness = thickness_at(y_pos)
    return translate([local_thickness / 2, y_pos, width / 2])(
        rotate([0, 90, 0])(
            cylinder(h=width + 2, r=screw_radius, center=True)
        )
    )

# Add a second wedge on the sloped face
def create_second_wedge():
    # This wedge lies directly on top of the sloped face
    # So we offset all X values by the thickness of the first wedge at each Y

    profile = polygon(points=[
        [top_thickness, 0],
        [top_thickness + 5, 0],
        [bottom_thickness, second_wedge_length],
        [bottom_thickness, second_wedge_length]  # optional, for clarity
    ])
    return linear_extrude(width)(profile)

# Create a hole in the second wedge at 24.5mm from the top
def create_second_wedge_hole(y_pos):
    # Second wedge thickness at y
    local_thickness = 5 * (1 - y_pos / second_wedge_length)
    x_pos = thickness_at(y_pos) + local_thickness / 2
    return translate([x_pos, y_pos, width / 2])(
        rotate([0, 90, 0])(
            cylinder(h=width + 2, r=screw_radius, center=True)
        )
    )

# Build model
wedge = create_wedge()
hole1 = create_side_hole(hole1_y)
hole2 = create_side_hole(hole2_y)
second_wedge = translate([0, 0, 0])(
    translate([0, 0, 0])(
        translate([0, 0, 0])(create_second_wedge())
    )
)
second_hole = create_second_wedge_hole(hole1_y)

# Combine everything
model = (wedge + second_wedge) - (hole1 + hole2 + second_hole)

# Export to SCAD
scad_render_to_file(model, 'wedge.scad')

# Convert to STL
subprocess.run(["openscad", "-o", "wedge.stl", "wedge.scad"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True) 
 
************************************************/
